/**
* mapwriter API generated from mapwriter.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* MapwriterApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../Mapwriter.h"

#include "MapwriterJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace MapwriterApiImpl {
  void create_mapwriter_by_id(const std::string &name, const MapwriterJsonObject &value);
  void create_mapwriter_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void create_mapwriter_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void delete_mapwriter_by_id(const std::string &name);
  void delete_mapwriter_ports_by_id(const std::string &name, const std::string &portsName);
  void delete_mapwriter_ports_list_by_id(const std::string &name);
  MapwriterActionEnum read_mapwriter_action_by_id(const std::string &name);
  MapwriterJsonObject read_mapwriter_by_id(const std::string &name);
  std::vector<MapwriterJsonObject> read_mapwriter_list_by_id();
  PortsJsonObject read_mapwriter_ports_by_id(const std::string &name, const std::string &portsName);
  std::vector<PortsJsonObject> read_mapwriter_ports_list_by_id(const std::string &name);
  void replace_mapwriter_by_id(const std::string &name, const MapwriterJsonObject &value);
  void replace_mapwriter_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void replace_mapwriter_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void update_mapwriter_action_by_id(const std::string &name, const MapwriterActionEnum &value);
  void update_mapwriter_by_id(const std::string &name, const MapwriterJsonObject &value);
  void update_mapwriter_list_by_id(const std::vector<MapwriterJsonObject> &value);
  void update_mapwriter_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void update_mapwriter_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);

  /* help related */
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_mapwriter_list_by_id_get_list();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_mapwriter_ports_list_by_id_get_list(const std::string &name);

}
}
}
}

