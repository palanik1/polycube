/**
* mapwriter API generated from mapwriter.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/MapwriterBase.h"

#include "Ports.h"


using namespace polycube::service::model;

class Mapwriter : public MapwriterBase {
 public:
  Mapwriter(const std::string name, const MapwriterJsonObject &conf);
  virtual ~Mapwriter();

  void packet_in(Ports &port,
                 polycube::service::PacketInMetadata &md,
                 const std::vector<uint8_t> &packet) override;

  /// <summary>
  /// Action performed on the received packet (i.e.,READ, WRITE headers: READ)
  /// </summary>
  MapwriterActionEnum getAction() override;
  void setAction(const MapwriterActionEnum &value) override;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  std::shared_ptr<Ports> getPorts(const std::string &name) override;
  std::vector<std::shared_ptr<Ports>> getPortsList() override;
  void addPorts(const std::string &name, const PortsJsonObject &conf) override;
  void addPortsList(const std::vector<PortsJsonObject> &conf) override;
  void replacePorts(const std::string &name, const PortsJsonObject &conf) override;
  void delPorts(const std::string &name) override;
  void delPortsList() override;
};
