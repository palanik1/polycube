/**
* mapwriter API generated from mapwriter.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "MapwriterJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

MapwriterJsonObject::MapwriterJsonObject() {
  m_nameIsSet = false;
  m_action = MapwriterActionEnum::READ;
  m_actionIsSet = true;
  m_portsIsSet = false;
}

MapwriterJsonObject::MapwriterJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_actionIsSet = false;
  m_portsIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("action")) {
    setAction(string_to_MapwriterActionEnum(val.at("action").get<std::string>()));
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }
}

nlohmann::json MapwriterJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_actionIsSet) {
    val["action"] = MapwriterActionEnum_to_string(m_action);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  return val;
}

std::string MapwriterJsonObject::getName() const {
  return m_name;
}

void MapwriterJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool MapwriterJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



MapwriterActionEnum MapwriterJsonObject::getAction() const {
  return m_action;
}

void MapwriterJsonObject::setAction(MapwriterActionEnum value) {
  m_action = value;
  m_actionIsSet = true;
}

bool MapwriterJsonObject::actionIsSet() const {
  return m_actionIsSet;
}

void MapwriterJsonObject::unsetAction() {
  m_actionIsSet = false;
}

std::string MapwriterJsonObject::MapwriterActionEnum_to_string(const MapwriterActionEnum &value){
  switch(value) {
    case MapwriterActionEnum::READ:
      return std::string("read");
    case MapwriterActionEnum::WRITE:
      return std::string("write");
    default:
      throw std::runtime_error("Bad Mapwriter action");
  }
}

MapwriterActionEnum MapwriterJsonObject::string_to_MapwriterActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("read", str))
    return MapwriterActionEnum::READ;
  if (JsonObjectBase::iequals("write", str))
    return MapwriterActionEnum::WRITE;
  throw std::runtime_error("Mapwriter action is invalid");
}
const std::vector<PortsJsonObject>& MapwriterJsonObject::getPorts() const{
  return m_ports;
}

void MapwriterJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool MapwriterJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void MapwriterJsonObject::unsetPorts() {
  m_portsIsSet = false;
}


}
}
}

