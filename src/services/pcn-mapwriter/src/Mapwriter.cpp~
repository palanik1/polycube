/**
* mapwriter API generated from mapwriter.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "Mapwriter.h"
#include "Mapwriter_dp.h"

Mapwriter::Mapwriter(const std::string name, const MapwriterJsonObject &conf)
  : Cube(conf.getBase(), { mapwriter_code }, {}),
    MapwriterBase(name) {
  logger()->info("Creating Mapwriter instance");
    setAction(conf.getAction());
  addPortsList(conf.getPorts());
}


Mapwriter::~Mapwriter() {
  logger()->info("Destroying Mapwriter instance");
}

void Mapwriter::packet_in(Ports &port,
    polycube::service::PacketInMetadata &md,
    const std::vector<uint8_t> &packet) {
  logger()->debug("Packet received from port {0}", port.name());
}

MapwriterActionEnum Mapwriter::getAction() {
  uint8_t value = get_array_table<uint8_t>("action_map").get(0x0);
  return static_cast<MapwriterActionEnum>(value);

}

void Mapwriter::setAction(const MapwriterActionEnum &value) {
  uint8_t action = static_cast<uint8_t>(value);
  get_array_table<uint8_t>("action_map").set(0x0, action);
}

// Basic default implementation, place your extension here (if needed)
std::shared_ptr<Ports> Mapwriter::getPorts(const std::string &name) {
  // call default implementation in base class
  return MapwriterBase::getPorts(name);
}

// Basic default implementation, place your extension here (if needed)
std::vector<std::shared_ptr<Ports>> Mapwriter::getPortsList() {
  // call default implementation in base class
  return MapwriterBase::getPortsList();
}

// Basic default implementation, place your extension here (if needed)
void Mapwriter::addPorts(const std::string &name, const PortsJsonObject &conf) {
  MapwriterBase::addPorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void Mapwriter::addPortsList(const std::vector<PortsJsonObject> &conf) {
  // call default implementation in base class
  MapwriterBase::addPortsList(conf);
}

// Basic default implementation, place your extension here (if needed)
void Mapwriter::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  // call default implementation in base class
  MapwriterBase::replacePorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void Mapwriter::delPorts(const std::string &name) {
  // call default implementation in base class
  MapwriterBase::delPorts(name);
}

// Basic default implementation, place your extension here (if needed)
void Mapwriter::delPortsList() {
  // call default implementation in base class
  MapwriterBase::delPortsList();
}


